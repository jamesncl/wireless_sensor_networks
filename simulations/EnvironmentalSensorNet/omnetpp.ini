
[General]

# Always include Castalia.ini
include ../Parameters/Castalia.ini

# =====================================================================================
# Simulation time
# 86400 seconds = 1 day 
# 43200 seconds = 12 hours
# 2592000 seconds = 30 days
# 12 hours = 3600 seconds in an hour * 12 = 43200 seconds 
sim-time-limit = 43200s

# =====================================================================================
# Solar radiation time offset
SN.energySource[0].timeOffset = ${startSeconds=-5126400}

# =====================================================================================
# Node topology

#SN.numNodes = 3
#SN.field_x = 40
#SN.field_y = 40
#SN.deployment = # "[0]->center;[1..2]->2x2"  #"[0]->center;[1..4]->2x2"

#SN.numNodes = 17
#SN.field_x = 90
#SN.field_y = 90
#SN.deployment = "[0]->center;[1..16]->4x4"

SN.numNodes = 37
SN.field_x = 150
SN.field_y = 150
SN.deployment = "[0]->center;[1..36]->6x6"

SN.wirelessChannel.onlyStaticNodes = true

# =====================================================================================
# Sensor Network parameters

# the upper bound of a time interval (in seconds)
SN.node[*].startupRandomization = 5

# =====================================================================================
# Application settings
SN.node[*].ApplicationName = "EnvironmentalSensorNet"
SN.node[*].Application.samplingRatePerMinute = 6  # 6 per minute = every 10 seconds
# This sink parameter supports BoxMac / CTP routing:
SN.node[*].Application.sinkNodeId = "0"
# This sink parameter is to suport TMAC and MPR:
SN.node[0].Application.isSink = true
# Creates optional "Application level latency, in ms" output statistics
SN.node[*].Application.latencyHistogramMax = 10000 # in ms
SN.node[*].Application.latencyHistogramBuckets = 20 # in ms

# =====================================================================================
# Comms
# See https://groups.google.com/forum/#!topic/castalia-simulator/waxHbE3NSww
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2420.txt"
SN.node[*].Communication.Radio.TxOutputPower = "-0dBm"
SN.node[*].Communication.Radio.state = "SLEEP"  # Starting state
#SN.node[*].Communication.RoutingProtocolName = "CtpRouting"
#SN.node[*].Communication.MACProtocolName = "BoxMacTwo"
SN.node[*].Communication.Radio.mode = "normal"
#collisionModel: NO_INTERFERENCE_NO_COLLISIONS = 0,	SIMPLE_COLLISION_MODEL = 1,	ADDITIVE_INTERFERENCE_MODEL = 2
SN.node[*].Communication.Radio.collisionModel = 2 
SN.wirelessChannel.bidirectionalSigma = 0


# =====================================================================================
# Trace settings

#SN.debugOnlyAfterTime = 1018.0

#SN.wirelessChannel.collectTraceInfo = true
#SN.node[*].Application.collectTraceInfo = true
#SN.node[*].Communication.Routing.Controller.collectTraceInfo = true
#SN.node[*].Communication.Routing.BeaconSender.collectTraceInfo = true
#SN.node[*].Communication.Routing.LinkEstimator.collectTraceInfo = true
#SN.node[*].Communication.Routing.TableManager.collectTraceInfo = true
#SN.node[*].Communication.Routing.collectTraceInfo = true
#SN.node[*].Communication.MAC.Controller.collectTraceInfo = true
#SN.node[*].Communication.MAC.Cca.collectTraceInfo = true
#SN.node[*].Communication.MAC.Sender.collectTraceInfo = true
#SN.node[*].Communication.Radio.collectTraceInfo = true
#SN.node[*].Communication.MAC.collectTraceInfo = true
#SN.node[*].Communication.MAC.printStateTransitions = true  # For SMAC state transitions
#SN.node[*].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[*].collectTraceInfo = true
#SN.node[*].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[*].traceFile = "/home/vagrant/Castalia/Castalia/Simulations/EnvironmentalSensorNet/EnergyStorageTraceFile"
#SN.node[*].ResourceManager.EnergySubsystem.EnergyHarvesting.Harvesters[*].collectTraceInfo = true
#SN.node[*].ResourceManager.EnergySubsystem.EnergyManager.collectTraceInfo = true
#SN.node[*].ResourceManager.EnergySubsystem.EnergyManager.traceFile = "/home/vagrant/Castalia/Castalia/Simulations/EnvironmentalSensorNet/EnergyManagerTraceFile"
#SN.energySource[*].collectTraceInfo = true
#SN.node[*].SensorManager.collectTraceInfo = true

# =====================================================================================
# Plot trace settings
# Output file Plot-Trace.txt is parsed and plotted by tools/plot-trace/PlotTrace.py

# These allow plotting of MAC events (for BoX-MAC):
#SN.node[*].Communication.MAC.Controller.collectPlotTraceInfo = true
#SN.node[*].Communication.MAC.Cca.collectPlotTraceInfo = true
#SN.node[*].Communication.MAC.Sender.collectPlotTraceInfo = true
#SN.node[*].Communication.Radio.collectPlotTraceInfo = true
# These allow plotting of MAC events (for SMAC):
#SN.node[*].Communication.MAC.collectPlotTraceInfo = true
# These allow plotting of MAC events (RicerMAC):
#SN.node[*].Communication.MAC.collectPlotTraceInfo = true
# This allow plotting of on/off events
#SN.node[*].ResourceManager.EnergySubsystem.EnergyManager.collectPlotTraceInfo = true
# This allow plotting of energy consumed (also requires EnergyManager.collectPlotTraceInfo = true)
#SN.node[*].ResourceManager.EnergySubsystem.EnergyManager.collectEnergyChangeData = true  #!creates A LOT of data!
# This allow plotting of storage energy:
#SN.node[*].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[*].collectPlotTraceInfo = true
# These allow plotting of routing events:
#SN.node[*].Application.collectPlotTraceInfo = true
#SN.node[*].Communication.Routing.Controller.collectPlotTraceInfo = true
# This allows animations of routing parent events:
#SN.node[*].Communication.Routing.TableManager.collectPlotTraceInfo = true
#SN.node[*].Communication.Routing.BeaconSender.collectPlotTraceInfo = true


# =====================================================================================
# Energy

# ===================
# Resource Manager
# Individual module power draws are added to baselineNodePower to calculate overall power draw.
# We are accounting for all power consumed in individual modules so set baseline to zero.
SN.node[*].ResourceManager.baselineNodePower = 0.0 # mW
# If the remaining energy left in supercap is less than (0.5 * capacitance of supercap * cutoffVoltage^2) the resource manager shuts down the node
SN.node[*].ResourceManager.cutOffVoltage = 2.1 # Volts



# ===================
# Energy Storage

# The sink node (node 0) is assumed to have wired power, so we simulate this with a
# really large battery and no energy harvesting


# Non-sink nodes [1..]
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.numSupercaps = 1
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.numRechBatteries = 0
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.numBatteries = 0

# Supercapacitors for non-sink nodes (capacitance in Farads F)
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].maxVoltage = 3.0
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].capacitance = 40
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].fractionInitialCharge = uniform(0.55, 1) # 0.55
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].additionalMinimumEnergyRequiredForRestart = 2 # Joules
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].dischargingEfficiency = 1.0
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].chargingEfficiency = 1.0
# valid leakageModel values: none, constant, exponential, piecewise
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].leakageModel = "none"
# constLeakageCurrent: [only if constant leakage model is used] constant leakage current in mA
#SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].constLeakageCurrent = 0.0
# P_0 / alpha: [only if exponential leakage model is used]
#SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].P_0 = 0.0
#SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].alpha = 0.0


# Sink node [0]
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.numSupercaps = 0
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.numRechBatteries = 0
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.numBatteries = 1

# Battery for sink node (simulate wired energy with an ideal super large capacity battery)
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.Batteries[0].maxVoltage = 3
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.Batteries[0].mAmpereHour = 999999
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.Batteries[0].fractionInitialCharge = 1.0
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.Batteries[0].batteryModel = "ideal"
SN.node[0].ResourceManager.EnergySubsystem.EnergyStorage.Batteries[0].dischargingEfficiency = 1.0

# ===================
# Energy Sources
#
# trace file format must be <timestamp in seconds> <value>

# Note: default type is TraceEnergySource
SN.numEnergySources = 1
SN.energySource[0].description = "Solar"

# See config sections below for traceFile settings
# SN.energySource[0].traceFile = "/vagrant/data/PANGEA/Lerwick/Lerwick-Combined-1-Minute.csv"

# Trace offset: Use this to skip some of the initial trace values before it starts feeding into the simulation
# This should be a *negative* time in seconds - this number of seconds wil be discarded from the trace input
#
# e.g. 
# Dataset starts at 00:00, first light at 8:00 (San Francisco), so to start at 1st Jan morning daytime SanFran offset -8 hours (-28800s)
#
# e.g.
# To start at 5th March daytime (ffirst light about 8:30am) Lerwick, using *non-leap year data*, add (January = 31 days) + (February = 28 days)
#	+ 4 days + 8.5 hours =  
# (86400 seconds per day * 63 days) + (3600 seconds per hour * 8.5 hours) = 5473800 seconds
#
# 1st March 08:30 = add 59 days + 8.5 hours = 5097600 + 30600 = 5128200
SN.energySource[0].timeOffset = -5128200 


# ===================
# Energy harvesting device

SN.node[1..].ResourceManager.EnergySubsystem.EnergyHarvesting.numEnergyHarvesters = 1
SN.node[1..].ResourceManager.EnergySubsystem.EnergyHarvesting.Harvesters[0].typename = "SolarCell"
# max harvesting power (hardware limit)
SN.node[1..].ResourceManager.EnergySubsystem.EnergyHarvesting.Harvesters[0].maxHarvestingPower = -1 # mW
# solar cell size (in cm^2)
SN.node[1..].ResourceManager.EnergySubsystem.EnergyHarvesting.Harvesters[0].size = 4 # cm^2
# solar cell efficiency -- depends on solar cell hardware
SN.node[1..].ResourceManager.EnergySubsystem.EnergyHarvesting.Harvesters[0].cellEfficiency = 0.17
# time-varying harvesting efficiency -- depends on shadows, dust, ecc
SN.node[1..].ResourceManager.EnergySubsystem.EnergyHarvesting.Harvesters[0].efficiencyFile = ""


# =====================================================================================
# Physical Processes

SN.numPhysicalProcesses = 3
SN.physicalProcessName = "ConstantValuePhysicalProcess"
SN.physicalProcess[0].description = "Constant value temperature physical process"
SN.physicalProcess[1].description = "Constant value humidity physical process"
SN.physicalProcess[2].description = "Constant value solar radiation physical process"

# =====================================================================================
# Sensors

SN.node[*].SensorManager.numSensingDevices = 3
SN.node[*].SensorManager.sensorTypes = "Temperature Humidity TotalSolarRadiation" # TelosB sensors
# pwrConsumptionPerDevice: String-array with the power consumption per sample for each sensing device (space separated)
SN.node[*].SensorManager.pwrConsumptionPerDevice = "1.42 1.48 1.86"	# Empirical data from TelosB / TinyOS sensor reading (in mW)
SN.node[*].SensorManager.pwrOnReadingTimePerDevice = "0.236 0.77 0.38" # Empirical data from TelosB / TinyOS sensor reading (in mW)
# maxSampleRates: String-array that holds the maximum samples per sec rate for each if the sensing device types (space separated)
SN.node[*].SensorManager.maxSampleRates = "4 12 26" # Empirical data from TelosB / TinyOS sensor reading
# corrPhyProcess: String-array that holds the index of the Physical process that each one of the sensing device type corresponds (space separated)
SN.node[*].SensorManager.corrPhyProcess = "0 1 2"

# Note: As these values are not critical to this research, they are being left as defaults:
SN.node[*].SensorManager.devicesBias = "0.1 0.1 0.1"
SN.node[*].SensorManager.devicesNoise = "0.1 0.1 0.1"
SN.node[*].SensorManager.devicesSensitivity = "0 0 0"
SN.node[*].SensorManager.devicesResolution = "0.001 0.001 0.001"
SN.node[*].SensorManager.devicesSaturation = "1000 1000 1000"


[Config WindowsDeployment]
# Override default ../../src
ned-path = ../ned  
SN.node[*].Communication.Radio.RadioParametersFile = "CC2420.txt"

[Config WinLerwick1Min]
SN.energySource[0].traceFile = "data/PANGEA/Lerwick/Lerwick-Combined-1-Minute.csv"

[Config WinLerwick10Min]
SN.energySource[0].traceFile = "data/PANGEA/Lerwick/Lerwick-Combined-10-Minutes.csv"

[Config WinLerwick30Min]
SN.energySource[0].traceFile = "data/PANGEA/Lerwick/Lerwick-Combined-30-Minutes.csv"

[Config WinLerwick60Min]
SN.energySource[0].traceFile = "data/PANGEA/Lerwick/Lerwick-Combined-60-Minutes.csv"

[Config WinLerwick180Min]
SN.energySource[0].traceFile = "data/PANGEA/Lerwick/Lerwick-Combined-180-Minutes.csv"

[Config WinLerwick360Min]
SN.energySource[0].traceFile = "data/PANGEA/Lerwick/Lerwick-Combined-360-Minutes.csv"

[Config WinLerwick720Min]
SN.energySource[0].traceFile = "data/PANGEA/Lerwick/Lerwick-Combined-720-Minutes.csv"

[Config Short]
sim-time-limit = 100s

[Config Medium]
sim-time-limit = 1000s

[Config Long]
sim-time-limit = 10000s

[Config CustomDuration]
sim-time-limit = 2000s

[Config GVN]
SN.energySource[0].traceFile = "/vagrant/data/PANGEA/GVN/GVN-Combined-1-Minute.csv"

[Config LER]
SN.energySource[0].traceFile = "/vagrant/data/PANGEA/LER/LER-Combined-1-Minute.csv"

[Config NYA]
SN.energySource[0].traceFile = "/vagrant/data/PANGEA/NYA/NYA-Combined-1-Minute.csv"

[Config TAM]
SN.energySource[0].traceFile = "/vagrant/data/PANGEA/TAM/TAM-Combined-1-Minute.csv"

[Config TAT]
SN.energySource[0].traceFile = "/vagrant/data/PANGEA/TAT/TAT-Combined-1-Minute.csv"

[Config FirstOfApril]
SN.energySource[0].timeOffset = -7804800


[Config Sta-59-0800-Days-30]
# python:
# print ','.join([str(-5126400 - (i * 86400)) for i in range(0,30)])
SN.energySource[0].timeOffset = ${startSeconds=-5126400,-5212800,-5299200,-5385600,-5472000,-5558400,-5644800,-5731200,-5817600,-5904000,-5990400,-6076800,-6163200,-6249600,-6336000,-6422400,-6508800,-6595200,-6681600,-6768000,-6854400,-6940800,-7027200,-7113600,-7200000,-7286400,-7372800,-7459200,-7545600,-7632000} 

[Config Sta-59-0800-Days-10]
# 10 days, start March 1st (59th day) to March 10th (69th day)
# 1st March:
# For NON-LEAP-YEAR DATA add:
# January = 31 days
# February = 28 days 
# (subtotal 59 days = 86400 seconds in a day x 59 = 5097600 seconds) 
# 08:00 start: 8 hours = 3600 seconds in an hour x 8 = 28800 seconds
# 5097600 + 28800 = 5126400
#
# Then add 24 hours = 86400 for each successive day
# python:
# print ','.join([str(-5126400 - (i * 86400)) for i in range(0,10)])
SN.energySource[0].timeOffset = ${startSeconds=-5126400,-5212800,-5299200,-5385600,-5472000,-5558400,-5644800,-5731200,-5817600,-5904000} 

[Config Sta-59-0800-Days-5]
# python:
# print ','.join([str(-5126400 - (i * 86400)) for i in range(0,5)])
SN.energySource[0].timeOffset = ${startSeconds=-5126400,-5212800,-5299200,-5385600,-5472000} 

[Config Sta-59-0800-Days-1]
SN.energySource[0].timeOffset = ${startSeconds=-5126400}


[Config CtpBox]
SN.node[*].Communication.RoutingProtocolName = "CtpRouting"
SN.node[*].Communication.MACProtocolName = "BoxMacTwo"
#SN.node[*].Communication.MAC.Controller.sleepTime = ${boxWake=100ms,500ms}

[Config CtpTmac]
SN.node[*].Communication.RoutingProtocolName = "CtpRouting"
SN.node[*].Communication.MACProtocolName = "TMAC"
#SN.node[*].Communication.MAC.frameTime = ${tmacFrame=100,500}
SN.node[*].startupRandomization = 0.05
SN.node[*].Communication.Radio.state = "RX"
SN.node[*].Communication.Routing.Controller.implementRetries = false
SN.node[*].Communication.Routing.Controller.delayBeforeRouteDiscoveryPropagation = 1000ms


[Config CtpRicer]
SN.node[*].Communication.RoutingProtocolName = "CtpRouting"
SN.node[*].Communication.Routing.Controller.implementRetries = false
SN.node[*].Communication.Radio.state = "SLEEP"  # Starting state
SN.node[*].Communication.MACProtocolName = "RicerMac"
#SN.node[*].Communication.MAC.wakeForReceiveInterval = ${ricerWake=100ms,500ms}

[Config MmbcrRicer]
SN.node[*].Communication.RoutingProtocolName = "Mmbcr"
SN.node[*].Communication.Routing.Controller.implementRetries = false
SN.node[*].Communication.Radio.state = "SLEEP"  # Starting state
SN.node[*].Communication.MACProtocolName = "RicerMac"
#SN.node[*].Communication.MAC.wakeForReceiveInterval = ${ricerWake=100ms,500ms}
SN.node[*].Communication.Routing.TableManager.weightingMhEtx = 0
SN.node[*].Communication.Routing.BeaconSender.trickleFrequencyCoefficientMax = 10s  # To allow nodes to keep updating energy
SN.node[*].Communication.Routing.TableManager.newParentSwitchThreshold = 0.01

[Config MmbcrBox]
SN.node[*].Communication.RoutingProtocolName = "Mmbcr"
SN.node[*].Communication.MACProtocolName = "BoxMacTwo"
#SN.node[*].Communication.MAC.Controller.sleepTime = ${boxWake=100ms,500ms}
SN.node[*].Communication.Routing.TableManager.weightingMhEtx = 0
SN.node[*].Communication.Routing.BeaconSender.trickleFrequencyCoefficientMax = 10s  # To allow nodes to keep updating energy
SN.node[*].Communication.Routing.TableManager.newParentSwitchThreshold = 0.01

[Config MmbcrTmac]
SN.node[*].Communication.RoutingProtocolName = "Mmbcr"
SN.node[*].Communication.MACProtocolName = "TMAC"
#SN.node[*].Communication.MAC.frameTime = ${tmacFrame=100,500}
SN.node[*].startupRandomization = 0.05
SN.node[*].Communication.Radio.state = "RX"
SN.node[*].Communication.Routing.Controller.implementRetries = false
SN.node[*].Communication.Routing.Controller.delayBeforeRouteDiscoveryPropagation = 1000ms
SN.node[*].Communication.Routing.TableManager.weightingMhEtx = 0
SN.node[*].Communication.Routing.BeaconSender.trickleFrequencyCoefficientMax = 10s  # To allow nodes to keep updating energy
SN.node[*].Communication.Routing.TableManager.newParentSwitchThreshold = 0.01

[Config StaticRicer]
SN.node[*].Communication.RoutingProtocolName = "StaticRouting"
SN.node[*].Communication.Routing.implementRetries = false
SN.wirelessChannel.sigma = 0
include staticMapping36nodes.txt
SN.node[*].Communication.Radio.state = "SLEEP"  # Starting state
SN.node[*].Communication.MACProtocolName = "RicerMac"

[Config StaticTmac]
SN.node[*].Communication.RoutingProtocolName = "StaticRouting"
SN.node[*].Communication.Routing.implementRetries = false
SN.wirelessChannel.sigma = 0
include staticMapping36nodes.txt
SN.node[*].Communication.MACProtocolName = "TMAC"
SN.node[*].startupRandomization = 0.05
SN.node[*].Communication.Radio.state = "RX"

[Config StaticBox]
SN.node[*].Communication.RoutingProtocolName = "StaticRouting"
SN.wirelessChannel.sigma = 0
include staticMapping36nodes.txt
SN.node[*].Communication.MACProtocolName = "BoxMacTwo"

[Config varyRicerMackWaitingMultiplier]
SN.node[*].Communication.MAC.waitForDataAndAckResponseMultiplier = ${wait=2,4,6}

[Config varyRoutingTrickleMin]
SN.node[*].Communication.Routing.BeaconSender.trickleFrequencyCoefficientMin = ${trickle=125ms,500ms,1000ms,1500ms,2500ms}

[Config varyRicerWakeForReceiveInterval]
SN.node[*].Communication.MAC.wakeForReceiveInterval = ${wake=50ms,75ms,100ms,200ms,300ms,400ms,500ms,750ms,1000ms}

[Config varyRicerWakeJitter]
SN.node[*].Communication.MAC.wakeForReceiveIntervalJitter = ${jitter=0.5ms,30ms,60ms}

[Config varyRicerMaxBackoff]
SN.node[*].Communication.MAC.sendDataBackoffMax = ${backoff=200us,1000us,4000us}

[Config varyBoxMacCcaChecks]
#SN.node[*].Communication.MAC.Cca.minRequiredBusyCcaResults = 1
SN.node[*].Communication.MAC.Cca.maxCcaChecks = ${ccaChecks=6,100,1000,1600}

[Config twoByTwo]
SN.field_x = 30
SN.field_y = 30
SN.numNodes = 5
SN.deployment = "[0]->center;[1..4]->2x2"

[Config sixBySix]
SN.numNodes = 37
SN.field_x = 150
SN.field_y = 150
SN.deployment = "[0]->center;[1..36]->6x6"

[Config singleNode]
SN.field_x = 30
SN.field_y = 30
SN.numNodes = 2
SN.node[0].xCoor = 0
SN.node[0].yCoor = 15
SN.node[1].xCoor = 30
SN.node[1].yCoor = 15

[Config test]
# Replaces need for Loc-Ler-Gra-1,Sta-59-0800-Days-1
SN.energySource[0].traceFile = "/vagrant/data/PANGEA/Lerwick/Lerwick-Combined-1-Minute.csv"
SN.energySource[0].timeOffset = -5126400

[Config unlimitedEnergy]

SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].maxVoltage = 9999
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].capacitance = 999999999
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].fractionInitialCharge = 1
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].dischargingEfficiency = 1.0
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].chargingEfficiency = 1.0
SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].leakageModel = "none"

# =====================================================================================
# Experiment 2018-4-20

# vary location and routing:
# [CtpBox,CtpRicer,CtpTmac,MmbcrBox,MmbcrRicer,MmbcrTmac]

# vary node wakeup is included in vary location and routing

[Config varyLocation]

SN.energySource[0].traceFile = ${traceFile="/vagrant/data/PANGEA/BER/BER-Combined-1-Minute.csv","/vagrant/data/PANGEA/BOU/BOU-Combined-1-Minute.csv","/vagrant/data/PANGEA/CAB/CAB-Combined-1-Minute.csv","/vagrant/data/PANGEA/CAM/CAM-Combined-1-Minute.csv","/vagrant/data/PANGEA/COC/COC-Combined-1-Minute.csv","/vagrant/data/PANGEA/GVN/GVN-Combined-1-Minute.csv","/vagrant/data/PANGEA/LER/LER-Combined-1-Minute.csv","/vagrant/data/PANGEA/MAN/MAN-Combined-1-Minute.csv","/vagrant/data/PANGEA/NYA/NYA-Combined-1-Minute.csv","/vagrant/data/PANGEA/PAY/PAY-Combined-1-Minute.csv","/vagrant/data/PANGEA/PSU/PSU-Combined-1-Minute.csv","/vagrant/data/PANGEA/REG/REG-Combined-1-Minute.csv","/vagrant/data/PANGEA/SBO/SBO-Combined-1-Minute.csv","/vagrant/data/PANGEA/SMS/SMS-Combined-1-Minute.csv","/vagrant/data/PANGEA/SXF/SXF-Combined-1-Minute.csv","/vagrant/data/PANGEA/TAM/TAM-Combined-1-Minute.csv","/vagrant/data/PANGEA/TAT/TAT-Combined-1-Minute.csv","/vagrant/data/PANGEA/TOR/TOR-Combined-1-Minute.csv","/vagrant/data/PANGEA/XIA/XIA-Combined-1-Minute.csv"}

[Config varyLocationSubset]
# CAB, COC, SMS, TAM
SN.energySource[0].traceFile = ${traceFile="/vagrant/data/PANGEA/CAB/CAB-Combined-1-Minute.csv","/vagrant/data/PANGEA/COC/COC-Combined-1-Minute.csv","/vagrant/data/PANGEA/SMS/SMS-Combined-1-Minute.csv","/vagrant/data/PANGEA/TAM/TAM-Combined-1-Minute.csv"}

[Config varyLocationSubsetTwo]
# MAN, SBO, GVN, NYA
SN.energySource[0].traceFile = ${traceFile="/vagrant/data/PANGEA/MAN/MAN-Combined-1-Minute.csv","/vagrant/data/PANGEA/SBO/SBO-Combined-1-Minute.csv","/vagrant/data/PANGEA/GVN/GVN-Combined-1-Minute.csv","/vagrant/data/PANGEA/NYA/NYA-Combined-1-Minute.csv"}

[Config varyLocationSubsetThree]
# MAN, SBO, GVN, NYA
SN.energySource[0].traceFile = ${traceFile="/vagrant/data/PANGEA/REG/REG-Combined-1-Minute.csv","/vagrant/data/PANGEA/XIA/XIA-Combined-1-Minute.csv","/vagrant/data/PANGEA/PSU/PSU-Combined-1-Minute.csv","/vagrant/data/PANGEA/BOU/BOU-Combined-1-Minute.csv"}

[Config varyCellSize]

SN.node[1..].ResourceManager.EnergySubsystem.EnergyHarvesting.Harvesters[0].size = ${cellSize=2,2.5,3,3.5,4,4.5,5,5.5,6}

[Config varyCapSize]

SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].capacitance = ${capSize=20,25,30,35,40,45,50,55,60}

[Config varyEnergyRestart]

SN.node[1..].ResourceManager.EnergySubsystem.EnergyStorage.Supercapacitors[0].additionalMinimumEnergyRequiredForRestart = ${energyRestart=2,4} # Joules

[Config varyMonth]
# for 1st January 8am:
# 0 days from 1st Jan = 0 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 28800

# 1st Feb 8am:
# 31 days from 1st Jan = 86400 seconds in a day x 31 = 2678400 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 2707200

# 1st Mar 8am:
# 59 days from 1st Jan = 86400 seconds in a day x 59 = 5097600 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 5126400

# 1st Apr 8am:
# 90 days from 1st Jan = 86400 seconds in a day x 90 = 7776000 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 7804800

# 1st May 8am:
# 120 days from 1st Jan = 86400 seconds in a day x 120 = 10368000 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 10396800

# 1st June 8am:
# 151 days from 1st Jan = 86400 seconds in a day x 151 = 13046400 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 13075200

# 1st July 8am:
# 181 days from 1st Jan = 86400 seconds in a day x 181 = 15638400 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 15667200

# 1st Aug 8am:
# 212 days from 1st Jan = 86400 seconds in a day x 212 = 18316800 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 18345600

# 1st Sept 8am:
# 243 days from 1st Jan = 86400 seconds in a day x 243 = 20995200 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 21024000

# 1st Oct 8am:
# 274 days from 1st Jan = 86400 seconds in a day x 274 = 23673600 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 23702400

# 1st Nov 8am:
# 305 days from 1st Jan = 86400 seconds in a day x 305 = 26352000 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 26380800

# 1st Dec 8am:
# 335 days from 1st Jan = 86400 seconds in a day x 335 = 28944000 seconds
# 8 hours from 00:00 = 3600 seconds in an hour x 8 = 28800 seconds
# 28972800

SN.energySource[0].timeOffset = ${solarStart=-28800,-2707200,-5126400,-7804800,-10396800,-13075200,-15667200,-18345600,-21024000,-23702400,-26380800,-28972800}

[Config varyEveryFifthDay]

SN.energySource[0].timeOffset = ${solarStart=-28800,-460800,-892800,-1324800,-1756800,-2188800,-2707200,-3139200,-3571200,-4003200,-4435200,-4867200,-5126400,-5558400,-5990400,-6422400,-6854400,-7286400,-7804800,-8236800,-8668800,-9100800,-9532800,-9964800,-10396800,-10828800,-11260800,-11692800,-12124800,-12556800,-13075200,-13507200,-13939200,-14371200,-14803200,-15235200,-15667200,-16099200,-16531200,-16963200,-17395200,-17827200,-18345600,-18777600,-19209600,-19641600,-20073600,-20505600,-21024000,-21456000,-21888000,-22320000,-22752000,-23184000,-23702400,-24134400,-24566400,-24998400,-25430400,-25862400,-26380800,-26812800,-27244800,-27676800,-28108800,-28540800,-28972800,-29404800,-29836800,-30268800,-30700800,-31132800}

[Config loadPoisson]

SN.node[*].Application.distribution = "poisson"

[Config loadUniform]

SN.node[*].Application.distribution = "uniform"

[Config loadCompPoisson]

SN.node[*].Application.distribution = "compoundpoisson"
SN.node[*].Application.geometricBatchSizeParameterP = ${batchP=0.2,0.3,0.4}
#SN.node[*].Application.samplingRatePerMinute = 6  # 6 per minute = every 10 seconds
